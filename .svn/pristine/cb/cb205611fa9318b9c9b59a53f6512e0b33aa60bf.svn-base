package com.frog.serviceImpl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.frog.common.CommonUtils;
import com.frog.common.Result.ApiResult;
import com.frog.dao.TakeTaskInfoMapper;
import com.frog.dao.TaskInfoMapper;
import com.frog.model.FrogTake;
import com.frog.model.FrogTask;
import com.frog.service.TaskService;

public class TaskServiceImpl implements TaskService {
	@Autowired
	private TaskInfoMapper taskInfoMapper;
	@Autowired
	private TakeTaskInfoMapper takeTaskInfoMapper;

	@Override
	public List<FrogTask> getTask() {
		List<FrogTask> taskList = taskInfoMapper.allTaskInfo();

		return CommonUtils.getRandomList(taskList, 1);

	}

	@Override
	public List<FrogTask> list(Integer page, Integer pageSize, Map<String, Object> params) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long count(Map<String, Object> params) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public FrogTask viewById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean delete(int id) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public FrogTask save(FrogTask t) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean update(FrogTask t) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public String getFilePath(Integer fileid) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ApiResult allTaskInfo() {
		ApiResult apiResult = new ApiResult();
		Map<String, Object> map = new HashMap<String, Object>();
		List<FrogTask> list = taskInfoMapper.allTaskInfo();
		map.put("list", list);
		apiResult.setResult(map);
		return apiResult;
	}

	@Override
	public List<FrogTask> myTask(Integer user_id, Integer page, Integer type) {
		List<FrogTask> list = taskInfoMapper.selectAllTaskInfo(user_id, (page - 1) * 5, type);

		return list;
	}

	@Override
	@Transactional(readOnly = false)
	public int operateTakeTask(Integer take_id, Integer type) {
		if (type == 1) {
			takeTaskInfoMapper.operateTakeTask((short) 1, type, take_id);
		}
		if (type == 2) {
			takeTaskInfoMapper.operateTakeTask((short) 2, type, take_id);
		}
		return 1;
	}

	@Override
	public FrogTake selectTakeByTakeId(Integer take_id) {
		return takeTaskInfoMapper.selectTakeByTakeId(take_id);
	}

}
